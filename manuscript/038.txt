## Эмулятор Судного дня

Для закрепления знаний давайте напишем эмулятор Судного дня. Машины захватили мир, идет борьба за выживание. Кто выживет, человечество или машины, покажет судьба. Точнее, генератор случайных чисел.

Программа будет выводить на экран поток случайных сообщений, которые будут представлять какие-либо события в мире. Если бы это была графическая программа, было бы интереснее. Но в текстовом виде степень интересности зависит лишь от воображения зрителя. Возможно, кому-то понравится наша программа и пользователи поставят ее как `screen saver`.

Важное примечание: написать программу можно и проще, и лучше. Но пока мы не изучили все конструкции языка, ограничимся тем, что есть.

Для начала условимся, что людей и машин осталось поровну: по 10 000 с каждой стороны. В каждом цикле программы будет происходить одно случайное событие. И с одинаковой долей вероятности число людей или машин будет убавляться. Победа наступает в том случае, когда или людей, или машин не осталось. Приступим.

Во-первых, сформулируем правило победы. У нас будет главный цикл и две переменные:

{line-numbers: false}
```ruby
humans = 10_000
machines = 10_000

loop do
  if check_victory?
    exit
  end
  ...
end
```

Две переменные `humans` и `machines` будут хранить значение о количестве выживших.

Метод `check_victory?` будет возвращать значение типа *Boolean*, и если наступила победа одной из сторон (не важно, какой), то производится выход из программы. Если победы не наступило, борьба продолжается. Пусть этот метод также выводит сообщение о том, кто в итоге выиграл.

Теперь нужно определить несколько событий, которые могут случиться. Назовем их `event1`, `event2` и `event3`. В зависимости от случайного значения будет вызываться тот или иной метод. Будем подбрасывать игральную кость (dice), которая пока будет принимать значение от 1 до 3:

{caption: "Эскиз программы, которую мы собираемся сделать", line-numbers: false}
```ruby
def event1
  # ...
end

def event2
  # ...
end

def event3
  # ...
end

# ...

dice = rand(1..3)

if dice == 1
  event1
elsif dice == 2
  event2
elsif dice == 3
  event3
end
```

Мы применили новое ключевое слово `elsif` (слово `else` нам уже знакомо). `Elsif` — это, пожалуй, самое неочевидное сокращение в языке Руби, которое означает «else if» (иначе если...).

Ну и завершим цикл конструкцией `sleep`, которая будет ждать случайное количество секунд (от 0.3 до 1.5):

{line-numbers: false}
```ruby
sleep rand(0.3..1.5)
```

Готовая программа:

{caption: "Эмулятор Судного дня, версия 1", line-numbers: false}
```ruby
########################################
# ОПРЕДЕЛЯЕМ ПЕРЕМЕННЫЕ
########################################

@humans = 10_000
@machines = 10_000

########################################
# ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ
########################################

# Метод возвращает случайное значение: true или false
def luck?
  rand(0..1) == 1
end

def boom
  diff = rand(1..5)
  if luck?
    @machines -= diff
    puts "#{diff} машин уничтожено"
  else
    @humans -= diff
    puts "#{diff} людей погибло"
  end
end

# Метод возвращает случайное название города
def random_city
  dice = rand(1..5)
  if dice == 1
    'Москва'
  elsif dice == 2
    'Лос-Анджелес'
  elsif dice == 3
    'Пекин'
  elsif dice == 4
    'Лондон'
  else
    'Сеул'
  end
end

def random_sleep
  sleep rand(0.3..1.5)
end

def stats
  puts "Осталось #{@humans.negative? ? 0 : @humans} людей и #{@maсhines.negative? ? 0 : @maсhines} машин"
end

########################################
# СОБЫТИЯ
########################################

def event1
  puts "Запущена ракета по городу #{random_city}"
  random_sleep
  boom
end

def event2
  puts "Применено радиоактивное оружие в городе #{random_city}"
  random_sleep
  boom
end

def event3
  puts "Группа солдат прорывает оборону противника в городе #{random_city}"
  random_sleep
  boom
end

########################################
# ПРОВЕРКА ПОБЕДЫ
########################################

def check_victory?
  if @humans <= 0
    puts "Победили машины в количестве #{@maсhines}"
    true
  elsif @maсhines <= 0
    puts "Победили люди в количестве #{@humans}"
    true
  end
end

########################################
# ГЛАВНЫЙ ЦИКЛ
########################################

loop do
  if check_victory?
    exit
  end

  dice = rand(1..3)

  if dice == 1
    event1
  elsif dice == 2
    event2
  elsif dice == 3
    event3
  end

  stats
  random_sleep
end
```

Результат работы:

{line-numbers: false}
```
Запущена ракета по городу Сеул
1 машин уничтожено
Осталось 10000 людей и 9999 машин
Применено радиоактивное оружие в городе Пекин
4 людей погибло
Осталось 9996 людей и 9999 машин
Применено радиоактивное оружие в городе Лос-Анджелес
4 машин уничтожено
Осталось 9996 людей и 9995 машин
Группа солдат прорывает оборону противника в городе Лондон
...
```

X> ## Задание 1 
X> Реализуйте метод `check_victory?` (сейчас он просто возвращает значение false). В случае победы или поражения необходимо выводить полученный результат на экран. Измените `10_000` на `10`, чтобы легче было отлаживать программу.
>
X> ## Задание 2 
X> Посмотрите документацию к «*ruby case statements*» и замените конструкцию `if...elsif` на `case...when`.
>
X> ## Задание 3 
X> Сделать так, чтобы цикл был теоретически бесконечным. То есть чтобы равновероятно на свет появлялись люди и машины. Количество появившихся людей или машин должно равняться количеству погибших людей или машин. Несмотря на то что теоретически борьба может быть бесконечной, на практике может наступить ситуация, в которой та или иная сторона выигрывает. Проверьте программу на практике, попробуйте разные значения `humans` и `machines` (1000, 100, 10).
>
X> ## Задание 4 
X> Улучшите программу, добавьте как минимум еще 3 события, которые могут влиять на результат Судного дня.
